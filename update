#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim-bundle-mate script by jungo
# https://github.com/jungo-git/vim-bundle-mate

import re
import gzip
from lxml import html
from subprocess import Popen, PIPE
from urllib.request import urlopen
from os import makedirs, unlink, path
from shutil import rmtree
from zipfile import ZipFile

# git
# repository, plugin name
git = (
        ('https://github.com/msanders/snipmate.vim.git','snipmate'),
        ('https://github.com/scrooloose/nerdcommenter.git','nerd-commenter'),
        ('https://github.com/scrooloose/nerdtree.git','nerd-tree'),
        ('https://github.com/tpope/vim-surround.git','surround'),
        ('https://github.com/tpope/vim-repeat.git','vim-repeat'),
        ('https://github.com/Raimondi/delimitMate.git','delimit-mate'),
        ('https://github.com/tpope/vim-fugitive.git','fugitive'),
        ('https://github.com/tpope/vim-git.git','vim-git'),
        ('https://github.com/vim-scripts/FuzzyFinder.git','fuzzy-finder'),
        ('https://github.com/vim-scripts/mru.vim.git','mru'),
        ('https://github.com/vim-scripts/Rainbow-Parenthesis.git','rainbow-parenthesis'),
      )
# plugin dir name, src_id, type = [zip, vba, folder to copy to]
vimorg = (
        #('python-complete','10872','autoload'), # not and auto update
        ('python-complete','1542','auto/autoload'), # auto update
        ('buffer-explorer','14208','zip'),
        ('supertab-continued','15029','vba'),
        ('draw-it','8798','vba'),
        ('auto-compl-pop','11894','zip'),
        ('match-it','8196','zip'),
        ('bufexplorer','14208','zip'),
        ('makrs-browser','6408','plugin'),
        ('indexed-search','7062','plugin'),
        ('tag-list','7701','zip'),
        ('show-marks','3342','plugin'),
        ('yankring','13554','zip'),
        ('error-marker','14142','plugin'),
        ('zenburn','14111','vba'),
        ('vim-a','7218','plugin'),
        ('rst-tables-unicode','14999','plugin'),
        ('command-t','15305','vba'), #cd command-t/ruby/command-t; ruby extconf.rb; make
        ('vim-outliner','5768','zip'),
        ('vim-l9-library','13948','zip'),
        ('vim-opengl','7583','syntax'),
      )

def git_clone():
    global git
    for arg in git:
        # first, remove existent dir
        try:
            gitpath = path.join('bundle', arg[1])
            rmtree(gitpath)
            print('Removed old dir:', gitpath)
        except OSError:
            pass
        cmd = 'git clone ' + arg[0] + ' ' + gitpath
        Popen(cmd, shell=True).communicate()
        print('Removing .git folder in', gitpath)
        try:
            rmtree(path.join(gitpath, '.git'))
        except OSError:
            pass
        print()

def download_vimorg():
    global vimorg
    for arg in vimorg:
        # TODO: remove old dir
        # remove old dir
        try:
            oldpath = path.join('bundle', arg[0])
            rmtree(oldpath)
            print('Removed old dir:', oldpath)
        except OSError:
            pass
        if arg[2] == 'zip' or arg[2] == 'vba':
            filepath = path.join('bundle', arg[0])
        else:
            filepath = path.join('bundle', arg[0], arg[2])
        makedirs(filepath, exist_ok=True)
        url = 'http://www.vim.org/scripts/download_script.php?src_id=' + arg[1]
        u = urlopen(url)
        filename = u.info().get_filename()
        fullpath = path.join(filepath, filename)
        print('vim.org: ' + url)
        print('Downloading', filename, 'into', filepath)
        with open(fullpath,'wb') as f:
            f.write(u.read())
        u.close()

        # check file type and do additional actions
        # zip
        if arg[2] == 'zip':
            with ZipFile(fullpath, 'r') as myzip:
                print('Extracting zip archive...')
                myzip.extractall(filepath)
                # extractall doesn't return a value
                print('Done.')
            unlink(fullpath)
        # vimball
        elif arg[2] == 'vba':
            # if vimball compressed with gzip
            if path.splitext(filename)[1] == '.gz':
                print('Extracting gzipped vimball...')
                with gzip.open(fullpath, 'rb') as f:
                    filename = path.splitext(filename)[0]
                    gz_fullpath = fullpath
                    fullpath = path.splitext(fullpath)[0]
                    with open(fullpath, 'wb') as d:
                        d.write(f.read())
                    print('Done.')
                    # delete .gz file
                    unlink(gz_fullpath)
                    print('Deleted', gz_fullpath)
            # extract vimball
            print('Extracting vimball...')
            with open(fullpath, 'r') as vba:
                content = vba.readlines()
                header = ''.join(content[0:3])

                it = iter(content)
                shift = 2
                for i, line in enumerate(it):
                    matches = re.match('^(.*?)\t\[\[\[1$', line)
                    if matches:
                        # vba_xxx is current file in vimball archive
                        vba_filename = path.basename(matches.group(1))
                        vba_filepath = path.join(filepath, path.dirname(matches.group(1)))
                        vba_fullpath = path.join(vba_filepath, vba_filename)
                        linecount = int(next(it))
                        print(vba_fullpath + ':', linecount, 'lines')
                        makedirs(vba_filepath, exist_ok=True)
                        with open(vba_fullpath, 'w') as f:
                            f.writelines(content[i+shift:i+shift+linecount])
                        shift += 1
                print('Done.')
            # delete .vba file
            unlink(fullpath)
            print('Deleted', fullpath)

        print()

def get_latest_file(url):
    u = urlopen(url)
    doc = html.document_fromstring(u.read())
    latest = [tag for tag in doc.cssselect('a') if 'download_script.php?src_id' in tag.get('href')][0]
    latest_filename = latest.text
    latest_url = latest.get('href')
    return latest_filename, latest_url

#git_clone()
#download_vimorg()
get_latest_file()
