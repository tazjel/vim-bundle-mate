#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim-bundle-mate script by jungo
# https://github.com/jungo-git/vim-bundle-mate
# version 1.0

import re
import gzip
from lxml import html
from subprocess import Popen, PIPE
from urllib.request import urlopen
from os import makedirs, unlink, path
from shutil import rmtree
from zipfile import ZipFile

# git {{{
# repository, plugin name
git = (
        ('https://github.com/msanders/snipmate.vim.git','snipmate'),
        ('https://github.com/scrooloose/nerdcommenter.git','nerd-commenter'),
        ('https://github.com/scrooloose/nerdtree.git','nerd-tree'),
        ('https://github.com/tpope/vim-surround.git','surround'),
        ('https://github.com/tpope/vim-repeat.git','vim-repeat'),
        ('https://github.com/Raimondi/delimitMate.git','delimit-mate'),
        ('https://github.com/tpope/vim-fugitive.git','fugitive'),
        ('https://github.com/tpope/vim-git.git','vim-git'),
        ('https://github.com/vim-scripts/mru.vim.git','mru'),
        ('https://github.com/vim-scripts/Rainbow-Parenthesis.git','rainbow-parenthesis'),
      )
# }}}
# comment {{{
# plugin dir name, src_id, type = [zip, vba, folder to copy to]
# to enable auto update:
#   1. second argument must be an script_id
#   2. third argument must be started with 'auto/'
#   example: link is http://www.vim.org/scripts/script.php?script_id=1542
#   so, second argument is 1542
#   REMEMBER: auto => script_id
#             else => src_id
# }}}
# plugins to download from vim.org {{{
# i want latest plugins, so i use auto
vimorg = (
        ('python-complete','1542','auto/autoload'),
        ('buffer-explorer','42','auto/zip'),
        ('supertab-continued','1643','auto/vba'),
        ('draw-it','40','auto/vba'),
        ('auto-compl-pop','1879','auto/zip'),
        ('match-it','39','auto/zip'),
        ('marks-browser','1706','auto/plugin'),
        ('indexed-search','1682','auto/plugin'),
        ('tag-list','273','auto/zip'),
        ('show-marks','152','auto/plugin'),
        ('yankring','1234','auto/zip'),
        ('error-marker','1861','auto/plugin'),
        ('zenburn','415','auto/vba'),
        ('vim-a','31','auto/plugin'),
        ('rst-tables-unicode','3450','auto/plugin'),
        ('command-t','3025','auto/vba',['cd bundle/command-t/ruby/command-t/','ruby extconf.rb','make']),
        ('vim-outliner','517','auto/zip'),
        ('vim-opengl','752','auto/syntax'),
      )
# }}}

def git_clone():
    global git
    for arg in git:
        # first, remove existent dir
        try:
            gitpath = path.join('bundle', arg[1])
            rmtree(gitpath)
            print('Removed old dir:', gitpath)
        except OSError:
            pass
        cmd = 'git clone ' + arg[0] + ' ' + gitpath
        Popen(cmd, shell=True).communicate()
        print('Removing .git folder in', gitpath)
        try:
            rmtree(path.join(gitpath, '.git'))
        except OSError:
            pass
        print()

def download_vimorg():
    global vimorg
    for arg in vimorg:
        # remove old dir
        try:
            oldpath = path.join('bundle', arg[0])
            rmtree(oldpath)
            print('Removed old dir:', oldpath)
        except OSError:
            pass
        # check if need to auto update
        if 'auto/' in arg[2]:
            auto = True
            plugin_type = arg[2][5:]
            filename, url = get_latest_file('http://www.vim.org/scripts/script.php?script_id=' + arg[1])
            # some error happened
            if filename == 'Error!' and url == 'Wrong script_id?':
                print('!!! Error downloading', arg[0]+'!','Maybe wring script_id? !!!')
                print()
                continue
        else:
            auto = False
            plugin_type = arg[2]
            url = 'http://www.vim.org/scripts/download_script.php?src_id=' + arg[1]
        # open url
        u = urlopen(url)
        # if auto we already got a filename
        if not auto:
            filename = u.info().get_filename()
        # check if file is archive
        if plugin_type == 'zip' or plugin_type == 'vba':
            filepath = path.join('bundle', arg[0])
        else:
            filepath = path.join('bundle', arg[0], plugin_type)
        # make directories
        makedirs(filepath, exist_ok=True)
        fullpath = path.join(filepath, filename)
        print('vim.org: ' + url)
        print('Downloading', filename, 'into', filepath)
        with open(fullpath,'wb') as f:
            f.write(u.read())
        u.close()

        # check file type and do additional actions
        # zip
        if plugin_type == 'zip':
            with ZipFile(fullpath, 'r') as myzip:
                print('Extracting zip archive...')
                myzip.extractall(filepath)
                # extractall doesn't return a value
                print('Done.')
            unlink(fullpath)
        # vimball
        elif plugin_type == 'vba':
            # if vimball compressed with gzip
            if path.splitext(filename)[1] == '.gz':
                print('Extracting gzipped vimball...')
                with gzip.open(fullpath, 'rb') as f:
                    filename = path.splitext(filename)[0]
                    gz_fullpath = fullpath
                    fullpath = path.splitext(fullpath)[0]
                    with open(fullpath, 'wb') as d:
                        d.write(f.read())
                    print('Done.')
                    # delete .gz file
                    unlink(gz_fullpath)
                    print('Deleted', gz_fullpath)
            # extract vimball
            print('Extracting vimball...')
            with open(fullpath, 'r') as vba:
                content = vba.readlines()
                header = ''.join(content[0:3])

                it = iter(content)
                shift = 2
                for i, line in enumerate(it):
                    matches = re.match('^(.*?)\t\[\[\[1$', line)
                    if matches:
                        # vba_xxx is current file in vimball archive
                        vba_filename = path.basename(matches.group(1))
                        vba_filepath = path.join(filepath, path.dirname(matches.group(1)))
                        vba_fullpath = path.join(vba_filepath, vba_filename)
                        linecount = int(next(it))
                        print(vba_fullpath + ':', linecount, 'lines')
                        makedirs(vba_filepath, exist_ok=True)
                        with open(vba_fullpath, 'w') as f:
                            f.writelines(content[i+shift:i+shift+linecount])
                        shift += 1
                print('Done.')
            # delete .vba file
            unlink(fullpath)
            print('Deleted', fullpath)

        print()
        # try to execute user-defined commands
        try:
            post_install(arg[3])
        except IndexError:
            pass
        print()

def get_latest_file(url):
    u = urlopen(url)
    doc = html.document_fromstring(u.read())
    try:
        latest = [tag for tag in doc.cssselect('a') if 'download_script.php?src_id' in tag.get('href')][0]
    except IndexError:
        return 'Error!', 'Wrong script_id?'
    latest_filename = latest.text
    latest_url = latest.get('href')
    return latest_filename, 'http://www.vim.org/scripts/' + latest_url

def post_install(commands):
    print('Executing post install commands...')
    cmd = ';'.join(commands)
    Popen(cmd, shell=True).communicate()


git_clone()
download_vimorg()
