#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim-bundle-mate script by jungo
# https://github.com/jungo-git/vim-bundle-mate
# version 1.1

import re
import gzip
from lxml import html
from subprocess import Popen
from urllib.request import urlopen
from os import makedirs, unlink, path
from shutil import rmtree
from zipfile import ZipFile

# git {{{
# repository, plugin name
# third parameter is optional: user command list to execute after plugin install
# must be a list type: ['cmd 1','cmd 2','cmd 3']
git = (
        ('https://github.com/msanders/snipmate.vim.git','snipmate'),
        ('https://github.com/scrooloose/nerdcommenter.git','nerd-commenter'),
        ('https://github.com/scrooloose/nerdtree.git','nerd-tree'),
        ('https://github.com/tpope/vim-surround.git','surround'),
        ('https://github.com/tpope/vim-repeat.git','vim-repeat'),
        ('https://github.com/Raimondi/delimitMate.git','delimit-mate'),
        ('https://github.com/tpope/vim-fugitive.git','fugitive'),
        ('https://github.com/tpope/vim-git.git','vim-git'),
        ('https://github.com/vim-scripts/mru.vim.git','mru'),
        ('https://github.com/fs111/pydoc.vim.git','pydoc'),
        ('https://github.com/altercation/vim-colors-solarized.git','vim-colors-solarized'),
        # very buggy
        #('https://github.com/klen/python-mode.git','python-mode'),
      )
# }}}
# comment {{{
#
# HAND MODE:
# ('python.vim','12804','syntax')
#   - python.vim is plugin directory name
#   - 12804 is src_id
#   - syntax is the type of the plugin
# so, the install path will be:
#   - bundle/python.vim/syntax/<plugin_name.vim>
#
# AUTO MODE:
# ('python-complete','1542','auto/autoload'),
# enables auto update (gets latest plugin version):
#   - python-complete is plugin directory name
#   - 1542 is script_id
#   - third argument must be started with 'auto/'
#     example: link is http://www.vim.org/scripts/script.php?script_id=1542
#     so, second argument is 1542
# REMEMBER: auto => script_id
#           else => src_id
# }}}
# plugins to download from vim.org {{{
# i want latest plugins, so i use auto
# four parameter is optional: user command list to execute after plugin install
# must be a list type: ['cmd 1','cmd 2','cmd 3']
vimorg = (
        ('python-complete','1542','auto/autoload'),
        ('buffer-explorer','42','auto/zip'),
        ('supertab-continued','1643','auto/vba'),
        ('draw-it','40','auto/vba'),
        ('auto-compl-pop','1879','auto/zip'),
        ('match-it','39','auto/zip'),
        ('indexed-search','1682','auto/plugin'),
        ('tag-list','273','auto/zip'),
        ('error-marker','1861','auto/plugin'),
        ('zenburn','415','auto/vba'),
        ('vim-a','31','auto/plugin'),
        ('rst-tables-unicode','3450','auto/plugin'),
        ('command-t','3025','auto/vba',
            ['cd bundle/command-t/ruby/command-t/','ruby extconf.rb','make']),
        ('vim-opengl','752','auto/syntax'),
        ('rainbow-parenthesis','1230','auto/plugin'),
        ('vim-pep8','2914','auto/ftplugin/python'),
        ('vim-pyflakes','2441','auto/zip'),
        ('omnicppcomplete','1520','auto/zip'),
        ('jinja2-syntax','1856','auto/syntax'),
        ('django-highlight','1487','auto/syntax'),
        #('python-ifold','2002','auto/zip',
           #['cd bundle/python-ifold/', 'mkdir ftplugin', 'cd ftplugin',
               #'mv ../python_ifold.b.vim .']),
        ('python.vim','12804','syntax'), # not auto, src_id
      )
# }}}

def remove_dir(path):
    try:
        rmtree(path)
        print('Removed dir:', path)
    except OSError:
        pass

def get_latest_file(url):
    """ parses url and returns latest file name and link
    to file on vim.org
    """
    u = urlopen(url)
    doc = html.document_fromstring(u.read())
    try:
        latest = [tag for tag in doc.cssselect('a') if 'download_script.php?src_id' in tag.get('href')][0]
    except IndexError:
        return None, None
    latest_filename = latest.text
    latest_url = latest.get('href')
    return latest_filename, 'http://www.vim.org/scripts/' + latest_url

def post_install(lst, index):
    try:
        commands = lst[index]
    except IndexError:
        pass
    else:
        print('Executing post install commands...')
        cmd = ';'.join(commands)
        Popen(cmd, shell=True).communicate()
    print()

def git_clone():
    """ clone git repositories """
    global git
    for arg in git:
        # arg[0] -> repository link
        # arg[1] -> plugin directory name (in bundle/)

        # first, remove existent dir
        gitpath = path.join('bundle', arg[1])
        remove_dir(gitpath)
        # clone shell command
        cmd = 'git clone --depth=1 ' + arg[0] + ' ' + gitpath
        Popen(cmd, shell=True).communicate()
        # remove .git folder in newly cloned repo
        remove_dir(path.join(gitpath, '.git'))
        # execute user-defined commands
        post_install(arg, 2)

def download_vimorg():
    global vimorg
    for arg in vimorg:
        # remove old dir
        oldpath = path.join('bundle', arg[0])
        remove_dir(oldpath)
        # check if need to auto update
        # if 'auto/' in arg[2]:
        if arg[2].startswith('auto/'):
            auto = True
            plugin_type = arg[2][5:]
            filename, url = get_latest_file(
               'http://www.vim.org/scripts/script.php?script_id=' + arg[1])
            # some error happened
            if filename is None:
                print('!!! Error downloading', arg[0]+'!',
                        'Maybe wrong script_id?')
                print()
                # stop downloading and iterate next argument
                continue
        # we don't want to auto update and given an src_id
        else:
            auto = False
            plugin_type = arg[2]
            url = 'http://www.vim.org/scripts/download_script.php?src_id=' + arg[1]
        # open url
        u = urlopen(url)
        # if auto we already got a filename
        if not auto:
            filename = u.info().get_filename()
        # check if file is archive
        if plugin_type == 'zip' or plugin_type == 'vba':
            filepath = path.join('bundle', arg[0])
        else:
            filepath = path.join('bundle', arg[0], plugin_type)
        # make directories
        makedirs(filepath, exist_ok=True)
        fullpath = path.join(filepath, filename)
        print('www.vim.org: ' + url)
        print('Downloading', filename, 'into', filepath)
        # download file
        with open(fullpath,'wb') as f:
            f.write(u.read())
        u.close()

        # check file type and do additional actions
        # zip
        if plugin_type == 'zip':
            with ZipFile(fullpath, 'r') as myzip:
                print('Extracting zip archive...')
                myzip.extractall(filepath)
                print('Done.')
            # delete .zip file
            unlink(fullpath)
        # vimball
        elif plugin_type == 'vba':
            # if vimball compressed with gzip
            if path.splitext(filename)[1] == '.gz':
                print('Extracting gzipped vimball...')
                with gzip.open(fullpath, 'rb') as f:
                    filename = path.splitext(filename)[0]
                    gz_fullpath = fullpath
                    fullpath = path.splitext(fullpath)[0]
                    with open(fullpath, 'wb') as d:
                        d.write(f.read())
                    print('Done.')
                    # delete .gz file
                    unlink(gz_fullpath)
                    print('Deleted', gz_fullpath)
            # extract vimball
            print('Extracting vimball...')
            with open(fullpath, 'r') as vba:
                content = vba.readlines()

                it = iter(content)
                shift = 2
                for i, line in enumerate(it):
                    matches = re.match('^(.*?)\t\[\[\[1$', line)
                    if matches:
                        # vba_xxx is current file in vimball archive
                        vba_filename = path.basename(matches.group(1))
                        vba_filepath = path.join(filepath, path.dirname(matches.group(1)))
                        vba_fullpath = path.join(vba_filepath, vba_filename)
                        linecount = int(next(it))
                        print(vba_fullpath + ':', linecount, 'lines')
                        makedirs(vba_filepath, exist_ok=True)
                        with open(vba_fullpath, 'w') as f:
                            f.writelines(content[i+shift:i+shift+linecount])
                        shift += 1
                print('Done.')
            # delete .vba file
            unlink(fullpath)
            print('Deleted', fullpath)

        print()
        # execute user-defined commands
        post_install(arg, 3)

git_clone()
download_vimorg()
